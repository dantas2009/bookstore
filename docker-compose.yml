services:

#Gateway
  gateway:
    build: 
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - bookstore
    depends_on:
      - auth
      - book
      - customer
      - order

#Auth
  auth_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: bookstore
      POSTGRES_DB: bookstore
    ports:
      - "54321:5432"
    networks:
      - bookstore
    volumes:
      - auth_data:/var/lib/postgresql/data

  auth:
    build: 
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - bookstore
    depends_on:
      - kafka
      - auth_db

#Customer
  customer_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: bookstore
      POSTGRES_DB: bookstore
    ports:
      - "54322:5432"
    networks:
      - bookstore
    volumes:
      - customer_data:/var/lib/postgresql/data

  customer:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    restart: unless-stopped
    working_dir: /var/www/html
    networks:
      - bookstore
    depends_on:
      - customer_db

  customer_server:
    image: 'nginx:latest'
    ports: 
        - "8082:8082"
    volumes:
      - ./customer-service:/var/www/html
      - ./customer-service/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - customer
    networks: 
        - bookstore

#Book
  book_db:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: bookstore
      POSTGRES_DB: bookstore
    ports:
      - "54323:5432"
    networks:
      - bookstore
    volumes:
      - book_data:/var/lib/postgresql/data

  book_cache:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - bookstore

  book:
    build:
      context: ./book-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - bookstore
    depends_on:
      - book_db
      - book_cache
    command: "npm run dev"
    environment:
      DATABASE_URL: "postgres://postgres:bookstore@book_db:5432/bookstore"
      CACHE_TIMEOUT: 3600
      REDIS_HOST: book_cache
      REDIS_PORT: 6379

#Order
  order_db:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - bookstore
    volumes:
      - order_data:/data/db

  order:
    build: 
      context: ./order-service
      dockerfile: Dockerfile
    environment:
      - GIN_MODE=release
    ports:
      - "8084:8084"
    depends_on:
      - order_db
    networks:
      - bookstore

#Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - bookstore
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    networks:
      - bookstore
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

#Bot
  email_bot:
    build:
      context: ./email-bot
      dockerfile: Dockerfile
    depends_on:
      - kafka
    networks:
      - bookstore

volumes:
  auth_data:
  book_data:
  customer_data:
  order_data:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:

networks:
  bookstore:
    driver: bridge
